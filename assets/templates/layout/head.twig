<meta name="apple-mobile-web-app-capable" content="yes" />
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta http-equiv="X-UA-Compatible" content="ie=edge">
<link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600&amp;subset=latin-ext" rel="stylesheet">
<link rel="stylesheet" href="public/css/style.css">
<link href="https://fonts.googleapis.com/css?family=Open+Sans:400,600,700&display=swap&subset=latin-ext" rel="stylesheet">
<script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
<script type="text/javascript">
    let shortcutsToRemove = [
        "49,access", "50,access", "51,access", "52,access", "53,access", "54,access", "55,access", "56,access", "57,access", "73,meta", "85,meta"
    ];
    let allowedTags = [
        "U", "B", "UL", "OL", "LI", "BODY", "STRONG", "SPAN"
    ];
    tinymce.init({
        selector: '#tinymce',
        block_formats: 'Paragraph=p; Header 1=h1',
        branding: false,
        menubar: false,
        statusbar: false,
        toolbar: 'undo redo | bold bullist numlist',
        inline_styles: false,
        plugins: "paste,autoresize,lists",
        paste_as_text: true,
        min_height: 400,
        autoresize_on_init: true,
        setup: function (editor) {
            editor.on("NodeChange", function (change) {
                if (allowedTags.indexOf(change.element.tagName) === -1) {
                    //let element = change.element;
                    //let parent = element.parentNode;
                    // let swap = null;
                    //if (parent.tagName === "BODY") {
                    //   swap = document.createElement('p');
                    // } else {
                    //    swap = document.createElement('span');
                    //}
                    //swap.innerHTML = element.innerHTML;
                    //parent.replaceChild(swap, element);

                }
                //console.log(change);
               // console.log(change.element.tagName);
               // console.log(allowedTags.indexOf(change.element));

            });
            editor.on("init", function (r) {
                let editor = r.target;
               // console.log(editor);
                for (let i = 0, max = shortcutsToRemove.length; i < max; i++) {
                    delete editor.shortcuts.shortcuts[shortcutsToRemove[i]];
                }
            });
        }
    });

</script>




